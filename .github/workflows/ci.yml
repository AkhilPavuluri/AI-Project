name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Testing and Linting
  backend-test:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e ".[dev]"
        
    - name: Run backend linting
      working-directory: ./backend
      run: |
        flake8 backend_app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check backend_app/
        isort --check-only backend_app/
        mypy backend_app/
        
    - name: Run backend tests
      working-directory: ./backend
      run: |
        python -m pytest tests/ -v --cov=backend_app --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Testing and Linting
  frontend-test:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run frontend linting
      working-directory: ./frontend
      run: |
        npm run lint
        npm run type-check
        
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  # Integration Tests
  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [backend-test, frontend-test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: gitam_policy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      qdrant:
        image: qdrant/qdrant:latest
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6333:6333
          
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9200:9200
          
      neo4j:
        image: neo4j:5.15-community
        env:
          NEO4J_AUTH: neo4j/password
        options: >-
          --health-cmd "cypher-shell -u neo4j -p password 'RETURN 1' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7474:7474
          - 7687:7687
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e ".[dev]"
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Wait for services to be ready
      run: |
        sleep 30  # Give services time to start
        
    - name: Run integration tests
      working-directory: ./backend
      env:
        POSTGRES_URL: postgresql://postgres:password@localhost:5432/gitam_policy_test
        QDRANT_URL: http://localhost:6333
        ELASTICSEARCH_URL: http://localhost:9200
        NEO4J_URL: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: password
      run: |
        python -m pytest tests/integration/ -v

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        pip install bandit safety
        
    - name: Run bandit security scan
      working-directory: ./backend
      run: |
        bandit -r backend_app/ -f json -o bandit-report.json || true
        
    - name: Run safety check
      working-directory: ./backend
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend Docker image
      working-directory: ./backend
      run: |
        docker build -t gitam-backend:latest .
        
    - name: Test backend Docker image
      run: |
        docker run --rm -d --name test-backend -p 8000:8000 gitam-backend:latest
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-backend

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: [backend-test, frontend-test, integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "TODO: Deploy to staging environment"
        # TODO: Add actual deployment steps
        # - Build and push Docker images
        # - Update Kubernetes manifests
        # - Run database migrations
        # - Health check deployment
        
    - name: Notify deployment
      run: |
        echo "Deployment completed successfully"
        # TODO: Add notification to Slack/Teams/Email
